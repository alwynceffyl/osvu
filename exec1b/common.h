#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <assert.h>
#include <limits.h> //für INT_MAX
#include <time.h> //für srand
/* für Shared Memory */
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <string.h>
#include <stdbool.h>
/* semaphore*/
#include <semaphore.h>

/**
 * @file common.h
 * @author Phillip Sassmann
 * @date 12.11.2024
 *
 * @brief Header file containing shared constants, types, and function declarations for graph coloring.
 *
 * @details This file provides constants, types, and function declarations used in generating
 * and managing 3-colorable graph solutions with inter-process communication (IPC) via
 * shared memory and semaphores.
 */


#define SHM_NAME "/12207461_SHM"
#define SEM_USED "/12207461_SEMUSED"
#define SEM_FREE "/12207461_SEMFREE"
#define SEM_GENERATOR "/12207461_SEMGENERATOR"


#define PERMISSIONS 0660
#define LEN 32
#define MAX_EDGES 8

/**
 * @enum COLOUR
 * @brief Enumeration of possible node colors.
 *
 * @details `COLOUR` is used to assign one of three possible colors to nodes,
 * allowing validation for 3-coloring of a graph where adjacent nodes should not
 * share the same color.
 */
typedef enum COLOUR {
  RED = 0,
  BLUE=1,
  GREEN =2
} colour_t;


/**
 * @struct node
 * @brief Represents a graph node.
 *
 * @details Each `node_t` instance represents a node with a color and a unique integer value.
 */
typedef struct node{
  colour_t colour;
  int value;
} node_t;


/**
 * @struct edges
 * @brief Represents an edge between two nodes.
 *
 * @details `edges_t` holds two nodes connected by an edge, identified by the
 * nodes' `node_from` and `node_to` attributes. This struct is essential for tracking
 * adjacency and color constraints between nodes.
 */
typedef struct edges {
    node_t node_from;
    node_t node_to;
} edges_t;

/**
 * @struct edgelist
 * @brief Collection of edges in a graph.
 *
 * @details `edgelist_t` holds multiple edges (up to `MAX_EDGES`) with a `size`
 * attribute that keeps track of the total number of edges in the list. Useful for managing
 * edges involved in the current graph solution.
 */
typedef struct edgelist{
    int size;
    edges_t list[MAX_EDGES];
}edgelist_t;

/**
 * @struct circularbuffer
 * @brief Circular buffer for storing solutions.
 *
 * @details `circularbuffer_t` manages solutions generated by multiple processes
 * using shared memory. It contains indicators for read/write positions, number of
 * generators, and a stop flag for halting execution.
 */
typedef struct circularbuffer {
    bool stop;
    unsigned int read_pos;
    unsigned int write_pos;
    unsigned int numGen;
    edgelist_t solution[LEN];
} circularbuffer_t;


/**
 * @brief Handles received signals to set a quit flag for terminating processes.
 *
 * @details Modifies the global `quit` flag to true, allowing processes to exit gracefully.
 *
 * @param signal The signal received (e.g., `SIGINT`, `SIGTERM`).
 */
void handle_signal(int signal);

/**
 * @brief Prints an error message and program usage information, then exits.
 *
 * @details Displays an error message indicating incorrect usage or arguments, then
 * terminates the program.
 *
 * @param errormsg Description of the encountered error.
 */
void usage(char* errormsg);

/**
 * @brief Outputs the edges in a solution to standard output.
 *
 * @details Iterates through the edges in `solution`, printing each edge in a formatted
 * string showing connections between nodes.
 *
 * @param solution The edge list solution to print.
 */
void printEdges(edgelist_t solution);

/**
 * @brief Attempts to generate a 3-colorable solution for the graph.
 *
 * @details Uses a randomized algorithm to color graph nodes and returns an
 * `edgelist_t` containing any edges where adjacent nodes have the same color.
 *
 * @param params Array of edges representing the graph.
 * @param size Number of edges in the `params` array.
 * @return edgelist_t List of edges that do not satisfy the 3-coloring condition.
 */
edgelist_t colouring(edges_t *params, int size);